//-------------------------------INTERRUPT 8 MODULE-------------------------------

//---------------Fork System Call(8)------------------
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 8;		//change mode_flag to fork_sys_call
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;		//save userSP of parent process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;	//user area page

//Allocate memory and set Process_Table
R1 = GET_PCB_ENTRY;
call MOD_1;


//if no pcb entry is available
if(R0 == -1) then
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	multipush(R0);
	alias userSP R0;
	userSP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
	multipop(R0);
	ireturn;
endif;

//if pcb entry is available
alias parentPID R7;
alias childPID R8;
alias parent_PTBR R13;
alias child_PTBR R14;
alias parent_PROCESS_TABLE R5;
alias child_PROCESS_TABLE R6;
parentPID = [SYSTEM_STATUS_TABLE + 1];
childPID = R0;
parent_PTBR = PAGE_TABLE_BASE + (20 * parentPID);
child_PTBR = PAGE_TABLE_BASE + (20 * childPID);
parent_PROCESS_TABLE = PROCESS_TABLE + (16 * parentPID);
child_PROCESS_TABLE = PROCESS_TABLE + (16 * childPID);

//if heap pages are not allocated,allocate it now because parent and child share heap
if([PTBR + 4] == -1) then
	backup;
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[parent_PTBR + 4] = R0;
	[parent_PTBR + 5] = "0110";
	restore;
endif;
if([PTBR + 6] == -1) then
	backup;
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[parent_PTBR + 6] = R0;
	[parent_PTBR + 7] = "0110";
	restore;
endif;
//allocate 2 stack and user area page number
//stack 1
backup;
R1 = GET_FREE_PAGE;
call MOD_2;
[child_PTBR + 16] = R0;
[child_PTBR + 17] = "0110";
restore;
//stack 2
backup;
R1 = GET_FREE_PAGE;
call MOD_2;
[child_PTBR + 18] = R0;
[child_PTBR + 19] = "0110";
restore;
//user area page number
backup;
R1 = GET_FREE_PAGE;
call MOD_2;
[child_PROCESS_TABLE + 11] = R0;
restore;

//copy process table entries from parent to child
alias i R9;
i = 0;
while(i < 16) do
	if((i == 3) || (i == 4) || (i == 6) || (i == 7) || (i == 9) || (i == 10) || (i == 13)) then
		[child_PROCESS_TABLE + i] = [parent_PROCESS_TABLE + i];
	endif;
	i = i + 1;
endwhile;

//set ppid field in child process_table
[child_PROCESS_TABLE + 2] = parentPID;
//set tick field for child
[child_PROCESS_TABLE + 0] = 0;
//set mode field for child process
[child_PROCESS_TABLE + 9] = 0;
//set kernel stack pointer
[child_PROCESS_TABLE + 12] = 0;
//PID, PTBR and PTLR are initialized by get_pcb_entry function

//copy parent per-process_resource table
alias parent_user_area_page R10;
alias child_user_area_page R11;
alias temp R12;
parent_user_area_page = [parent_PROCESS_TABLE + 11];
child_user_area_page = [child_PROCESS_TABLE + 11];
i = 496;
while(i < 512) do
	[child_user_area_page * 512 + i] = [parent_user_area_page * 512 + i];
	[child_user_area_page * 512 + i + 1] = [parent_user_area_page * 512 + i + 1];
	temp = [parent_user_area_page * 512 + i + 1];
	if([parent_user_area_page * 512 + i] == SEMAPHORE) then
		[SEMAPHORE_TABLE + (4 * temp) + 1] = [SEMAPHORE_TABLE + (4 * temp) + 1] + 1;
	endif;
	if([parent_user_area_page * 512 + i] == FILE) then
		[OPEN_FILE_TABLE + (4 * temp) + 1] = [OPEN_FILE_TABLE + (4 * temp) + 1] + 1;
	endif;
	i = i + 2;
endwhile;

breakpoint;

//copy parent per-process_disk_map_table to child
i = 0;
while(i < 10) do
	[DISK_MAP_TABLE + (childPID * 10) + i] = [DISK_MAP_TABLE + (parentPID * 10) + i];
	i = i + 1;
endwhile;

//copy PAGE_TABLE entries(code,heap and library) from parent to child
i = 0;
while(i < 16) do
	temp = [parent_PTBR + i];
	[child_PTBR + i] = temp;
	[child_PTBR + i + 1] = [parent_PTBR + i + 1];
	if(temp != -1) then
		[MEMORY_FREE_LIST + temp] = [MEMORY_FREE_LIST + temp] + 1;
	endif;
	i = i + 2;
endwhile;

//copy contents of parent's user stack in child's stack
alias parent_user_stack R10;
alias child_user_stack R11;
//stack1
parent_user_stack = [parent_PTBR + 16];
child_user_stack = [child_PTBR + 16];
if(parent_user_stack != -1) then
	i = 0;
	while(i < 512) do
		[child_user_stack * 512 + i] = [parent_user_stack * 512 + i];
		i = i + 1;
	endwhile;
endif;
//stack2
parent_user_stack = [parent_PTBR + 18];
child_user_stack = [child_PTBR + 18];
if(parent_user_stack != -1) then
	i = 0;
	while(i < 512) do
		[child_user_stack * 512 + i] = [parent_user_stack * 512 + i];
		i = i + 1;
	endwhile;
endif;

//store BP to beginning of kernel stack
[[child_PROCESS_TABLE + 11] * 512] = BP;

//return value for child process is 0
child_user_stack = [child_PROCESS_TABLE + 13];
[[child_PTBR + (2 * ((child_user_stack - 1) / 512))] * 512 + ((child_user_stack - 1) % 512)] = 0;

//return value for parent process is childPID
parent_user_stack = [parent_PROCESS_TABLE + 13];
[[parent_PTBR + (2 * ((parent_user_stack - 1) / 512))] * 512 + ((parent_user_stack - 1) % 512)] = childPID;

//state of child process is CREATED
[child_PROCESS_TABLE + 4] = CREATED;

//change mode of parent to user
[parent_PROCESS_TABLE + 9] = 0;

SP = [parent_PROCESS_TABLE + 13];
ireturn;
//----------------------------------------------------

//--------------------------------------------------------------------------------
