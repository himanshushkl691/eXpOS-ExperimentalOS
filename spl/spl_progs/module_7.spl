//load library
loadi(63,13);
loadi(64,14);

//load INIT program
loadi(65,7);
loadi(66,8);

//load INT_6 module
loadi(14,27);
loadi(15,28);

//load INT_7 module
loadi(16,29);
loadi(17,30);

//load INT 8 module
loadi(18,31);
loadi(19,32);

//load INT_9 module
loadi(20,33);
loadi(21,34);

//load INT_10 module
loadi(22,35);
loadi(23,36);

//load INT_11 module
loadi(24,37);
loadi(25,38);

//load INT_15 module
loadi(32,45);
loadi(33,46);

//load MOD_0
loadi(40,53);
loadi(41,54);

//load MOD_1
loadi(42,55);
loadi(43,56);

//load MOD_2
loadi(44,57);
loadi(45,58);

//load MOD_4
loadi(48,61);
loadi(49,62);

//load timer interrupt
loadi(4,17);
loadi(5,18);

//load exception handler
loadi(2,15);
loadi(3,16);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load inode table
loadi(59,3);
loadi(60,4);

//load disk free list
loadi(61,2);

//load exec program
//loadi(83,69);

alias i R0;
alias cnt R1;

//initialize state of {0..16}/{0,1,2} entries
i = 0;
while(i < 16) do
	[PROCESS_TABLE+(i*16)+4] = TERMINATED;
	i = i + 1;
endwhile;

i = 0;
cnt = 0;
while(i < 128) do
	if(i < 83) then
		[MEMORY_FREE_LIST + i] = 1;
	else
		[MEMORY_FREE_LIST + i] = 0;
		cnt = cnt + 1;
	endif;
	i = i + 1;
endwhile;

//mem_free_count
[SYSTEM_STATUS_TABLE + 2] = cnt;

//initially terminal is free
[TERMINAL_STATUS_TABLE]=0;

//reset WAIT_MEM_COUNT
[SYSTEM_STATUS_TABLE + 3] = 0;

//disk is not busy
[DISK_STATUS_TABLE] = 0;

//-----------------INIT Program---------------------
PTBR = PAGE_TABLE_BASE;
PTLR = 10;
i = 20;
//library
[PTBR + i + 0] = 63;
[PTBR + i + 1] = "0100";
[PTBR + i + 2] = 64;
[PTBR + i + 3] = "0100";

//heap
[PTBR + i + 4] = 78;
[PTBR + i + 5] = "0110";
[PTBR + i + 6] = 79;
[PTBR + i + 7] = "0110";

//code
[PTBR + i + 8] = 65;
[PTBR + i + 9] = "0100";
[PTBR + i + 10] = 66;
[PTBR + i + 11] = "0100";
[PTBR + i + 12] = -1;
[PTBR + i + 13] = "0000";
[PTBR + i + 14] = -1;
[PTBR + i + 15] = "0000";
//stack
[PTBR + i + 16] = 76;
[PTBR + i + 17] = "0110";
[PTBR + i + 18] = 77;
[PTBR + i + 19] = "0110";

i = 16;
//pid
[PROCESS_TABLE + i + 1] = 1;
//status
[PROCESS_TABLE + i + 4] = CREATED;
//user area page number
[PROCESS_TABLE + i + 11] = 80;
//user stack pointer
[PROCESS_TABLE + i + 13] = 8*512;
//kernel stack pointer
[PROCESS_TABLE + i + 12] = 0;
//ptbr
[PROCESS_TABLE + i + 14] = (PAGE_TABLE_BASE + 20);
//ptlr
[PROCESS_TABLE + i + 15] = 10;
[76 * 512] = [65 * 512 + 1];

//initialize per-process table for init
i = 496;
while(i <= 511) do
	[80 * 512 + i] = -1;
	i = i + 2;
endwhile;

//initialize disk-map table fot init
i = 0;
while(i < 10) do
	[DISK_MAP_TABLE + 10 + i] = -1;
	i = i + 1;
endwhile;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;

//---------------------EXEC Program--------------------------
//PTBR = PAGE_TABLE_BASE;
//PTLR = 10;

//i = 40;
//library
//[PTBR + i + 0] = 63;
//[PTBR + i + 1] = "0100";
//[PTBR + i + 2] = 64;
//[PTBR + i + 3] = "0100";

//heap
//[PTBR + i + 4] = 85;
//[PTBR + i + 5] = "0110";
//[PTBR + i + 6] = -1;
//[PTBR + i + 7] = "0000";

//code
//[PTBR + i + 8] = 83;
//[PTBR + i + 9] = "0100";
//[PTBR + i + 10] = -1;
//[PTBR + i + 11] = "0000";
//[PTBR + i + 12] = -1;
//[PTBR + i + 13] = "0000";
//[PTBR + i + 14] = -1;
[PTBR + i + 15] = "0000";

//stack
//[PTBR + i + 16] = 84;
//[PTBR + i + 17] = "0110";
//[PTBR + i + 18] = -1;
//[PTBR + i + 19] = "0000";

//i = 32;
//pid
//[PROCESS_TABLE + i + 1] = 2;
//status
//[PROCESS_TABLE + i + 4] = CREATED;
//user area page number
//[PROCESS_TABLE + i + 11] = 86;
//user stack pointer
//[PROCESS_TABLE + i + 13] = 8*512;
//kernel stack pointer
//[PROCESS_TABLE + i + 12] = 0;
//ptbr
//[PROCESS_TABLE + i + 14] = (PAGE_TABLE_BASE + 40);
//ptlr
//[PROCESS_TABLE + i + 15] = 10;
//[84 * 512] = [83 * 512 + 1];
return;
