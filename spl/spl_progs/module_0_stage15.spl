//--------------------------------------RESOURCE MANAGER MODULE---------------------------------------------
alias funcNum R1;
alias currPID R2;

//------------ACQUIRING TERMINAL------------
if(funcNum == ACQUIRE_TERMINAL) then
	
	//-------wait till terminal is released------
	while(([TERMINAL_STATUS_TABLE]) == 1) do
		[PROCESS_TABLE+(currPID*16)+4]=WAIT_TERMINAL;
		backup;
		call MOD_5;			//call scheduler
		restore;
	endwhile;
	//------------------------------------------

	[TERMINAL_STATUS_TABLE]=1;		//lock terminal
	[TERMINAL_STATUS_TABLE+1]=currPID;	//set PID field in terminal_status_table
	return;
endif;
//------------------------------------------

//----------RELEASING TERMINAL--------------
if(funcNum == RELEASE_TERMINAL) then
	if(currPID != [TERMINAL_STATUS_TABLE+1]) then
		R0 = -1;
		return;
	else
		[TERMINAL_STATUS_TABLE]=0;	//terminal released
		alias i R4;
		i = 0;
		//wake up all process having state WAIT_TERMINAL
		while(i < 16) do
			if([PROCESS_TABLE+(i*16)+4] == WAIT_TERMINAL) then
				[PROCESS_TABLE+(i*16)+4]=READY;
			endif;
			i = i + 1;
		endwhile;
		R0 = 0;
		return;
	endif;
endif;
//-------------------------------------------

//---------Acquire Disk(final)---------------
if(funcNum == ACQUIRE_DISK) then
	while ([DISK_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + (currPID * 16) + 4] = WAIT_DISK;
		backup;
		call MOD_5;
		restore;
	endwhile;
	[DISK_STATUS_TABLE] = 1;	//acquire disk
	[DISK_STATUS_TABLE + 4] = currPID;	//set PID field
	return;
endif;
//--------------------------------------------

//--------Acquire Semaphore(final)------------
if(funcNum == ACQUIRE_SEMAPHORE) then
	alias freeEntry R3;
	alias i R4;
	freeEntry = -1;
	i = 0;
	while(i < MAX_SEM_COUNT) do
		if([SEMAPHORE_TABLE + (i * 4) + 1] == 0) then	//if Process_Count is 0 then semaphore is free
			freeEntry = i;
			break;
		endif;
		i = i + 1;
	endwhile;

	if(freeEntry == -1) then
		R0 = -1;
		return;
	endif;

	[SEMAPHORE_TABLE + (freeEntry * 4) + 1] = 1;	//set Process_Count to 1
	[SEMAPHORE_TABLE + (freeEntry * 4)] = -1;	//set Locking_PID to -1

	R0 = freeEntry;
	return;
endif;
//--------------------------------------------

//-----------Release Semaphore(final)---------
if(funcNum == RELEASE_SEMAPHORE) then
	alias semid R3;
	alias i R4;
	//check locking_pid of semaphore it should be equal to currPID
	if([SEMAPHORE_TABLE + (4 * semid)] == currPID) then
		//set Locking_PID to -1
		[SEMAPHORE_TABLE + (4 * semid)] = -1;
		i = 0;
		while(i < 16) do
			if(([PROCESS_TABLE + (i * 16) + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + (i * 16) + 5] == semid)) then
				[PROCESS_TABLE + (i * 16) + 4] = READY;
			endif;
			i = i + 1;
		endwhile;
		//decrement process_count of semaphore in semaphore table,if process_count is 0 semaphore is free
		[SEMAPHORE_TABLE + (semid * 4) + 1] = [SEMAPHORE_TABLE + (semid * 4) + 1] - 1;
		R0 = 0;
	else
		R0 = -1;
	endif;
	return;
endif;
//------------------------------------------

//----------------------------------------------------------------------------------------------------------
