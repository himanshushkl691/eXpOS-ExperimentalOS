//change mode_flag to 5
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

alias userSP R0;
userSP = SP;

//save user stack pointer in UPTR
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//set SP to point to kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;


alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;

//get physical page number
physicalPageNum = [PTBR + 2 * ((userSP - 4) / 512)];
//physical offset
offset = (userSP - 4) % 512;

//physical address
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;

alias fileDescriptor R4;
fileDescriptor = [fileDescPhysicalAddr];

if (fileDescriptor != -2)
then
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;
else
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	//------------
	//print word
	backup;
	//multipush(R0,R1,R2,R3,R5,R6);
	R1 = 3;	//function number for terminal write is 3
	R2 = [SYSTEM_STATUS_TABLE + 1];	//save pid of current process
	R3 = word;		//to be written on terminal
	//Terminal Write module
	call MOD_4;
	//ignore return value in R0 terminal write doesn't return any value
	//multipop(R0,R1,R2,R3,R4,R5,R6);
	restore;
	//------------
	alias physicalAddrRetVal R6;
	physicalAddrRetVal = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;
endif;

SP = userSP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
